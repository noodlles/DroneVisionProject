// Generated by gencpp from file slamdunk_msgs/VideoModes.msg
// DO NOT EDIT!


#ifndef SLAMDUNK_MSGS_MESSAGE_VIDEOMODES_H
#define SLAMDUNK_MSGS_MESSAGE_VIDEOMODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace slamdunk_msgs
{
template <class ContainerAllocator>
struct VideoModes_
{
  typedef VideoModes_<ContainerAllocator> Type;

  VideoModes_()
    {
    }
  VideoModes_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }




    enum { MODE_MIN = 0 };
     enum { MODE_AUTO = 0 };
     enum { MODE_1280_960_30 = 1 };
     enum { MODE_1500_1500_30 = 2 };
     enum { MODE_1500_1500_60 = 3 };
     enum { MODE_900_700_120 = 4 };
     enum { MODE_MAX = 4 };
 

  typedef boost::shared_ptr< ::slamdunk_msgs::VideoModes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::slamdunk_msgs::VideoModes_<ContainerAllocator> const> ConstPtr;

}; // struct VideoModes_

typedef ::slamdunk_msgs::VideoModes_<std::allocator<void> > VideoModes;

typedef boost::shared_ptr< ::slamdunk_msgs::VideoModes > VideoModesPtr;
typedef boost::shared_ptr< ::slamdunk_msgs::VideoModes const> VideoModesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::slamdunk_msgs::VideoModes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace slamdunk_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'slamdunk_msgs': ['/home/me132/DroneVisionProject/DroneInterface/src/slamdunk_ros/slamdunk_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::slamdunk_msgs::VideoModes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::slamdunk_msgs::VideoModes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::slamdunk_msgs::VideoModes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0147adab7f1658b199e20466209de625";
  }

  static const char* value(const ::slamdunk_msgs::VideoModes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0147adab7f1658b1ULL;
  static const uint64_t static_value2 = 0x99e20466209de625ULL;
};

template<class ContainerAllocator>
struct DataType< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "slamdunk_msgs/VideoModes";
  }

  static const char* value(const ::slamdunk_msgs::VideoModes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# available video modes\n\
\n\
byte MODE_MIN = 0\n\
\n\
byte MODE_AUTO = 0\n\
byte MODE_1280_960_30 = 1\n\
byte MODE_1500_1500_30 = 2\n\
byte MODE_1500_1500_60 = 3\n\
byte MODE_900_700_120 = 4\n\
\n\
byte MODE_MAX = 4\n\
";
  }

  static const char* value(const ::slamdunk_msgs::VideoModes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VideoModes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::slamdunk_msgs::VideoModes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::slamdunk_msgs::VideoModes_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // SLAMDUNK_MSGS_MESSAGE_VIDEOMODES_H
